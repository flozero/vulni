
const baseUrl = "/api"

export interface Package {
    version: string,
    package: {
        name: string,
        ecosystem: string
    }
}

export interface PackageResponse {
    database_specific: {
        severity: string
    },
    summary: string,
    id: string,
    affected: {
        package: {
            name: string
        }
    }[]
}

export interface PackageContract { 
    name: string,
    severity: "low" | "moderate" | "high",
    detail: string,
    id: string
}

export const checkVulnerabilityBatch = async (pkgs: Package[]): Promise<PackageContract[]> => {
    const res = await Promise.all(pkgs.map(async p => {
        const ret = await fetch(`${baseUrl}/query`, {
            method: "POST",
            body: JSON.stringify({
                version: p.version,
                package: p.package
            })
        })
        return ret.json()
    }))


    const filteredVuln: PackageResponse[] = res.filter(r => r?.vulns?.length).reduce((acc, l) => {
        acc.push(l.vulns[l.vulns?.length - 1])
        return acc
    }, [] as PackageResponse[])

    const transformedVulnToContract = filteredVuln.map(v => ({
        "detail": v.summary,
        "id": v.id,
        "name": v.affected[0].package.name,
        "severity": v.database_specific.severity.toLowerCase() as PackageContract["severity"]
    }))

    return transformedVulnToContract
}